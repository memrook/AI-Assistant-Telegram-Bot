import os
import logging
import ssl
import time
import asyncio
from pathlib import Path
from docling.document_converter import DocumentConverter
from yandex_cloud_ml_sdk import YCloudML
from yandex_cloud_ml_sdk.search_indexes import (
    HybridSearchIndexType,
    StaticIndexChunkingStrategy,
    ReciprocalRankFusionIndexCombinationStrategy,
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
ssl._create_default_https_context = ssl._create_unverified_context

logger = logging.getLogger(__name__)

class PDFProcessor:
    def __init__(self, sdk: YCloudML, update_callback=None, max_processing_time=600):
        self.sdk = sdk
        self.converter = DocumentConverter()
        self.files = []
        self.index = None
        self.update_callback = update_callback
        self.max_processing_time = max_processing_time  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç)
        self.is_processing = False
        self.progress_info = {
            "current_file": "",
            "total_files": 0,
            "processed_files": 0,
            "current_step": "",
            "start_time": 0,
            "elapsed_time": 0
        }
        
    def create_progress_bar(self, progress, total, length=20):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ö–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        filled_length = int(length * progress // total)
        bar = '‚ñà' * filled_length + '‚ñë' * (length - filled_length)
        percent = progress / total * 100
        return f"[{bar}] {percent:.1f}% ({progress}/{total})"
        
    async def _send_progress_update(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        logger.info(message)
        if self.update_callback:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if self.progress_info["total_files"] > 0:
                progress_bar = self.create_progress_bar(
                    self.progress_info["processed_files"],
                    self.progress_info["total_files"]
                )
                elapsed = time.time() - self.progress_info["start_time"] if self.progress_info["start_time"] > 0 else 0
                eta = (elapsed / max(1, self.progress_info["processed_files"])) * (self.progress_info["total_files"] - self.progress_info["processed_files"]) if self.progress_info["processed_files"] > 0 else 0
                
                status = (
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}\n"
                    f"‚è± –ü—Ä–æ—à–ª–æ: {int(elapsed//60)}–º {int(elapsed%60)}—Å\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: {int(eta//60)}–º {int(eta%60)}—Å\n"
                    f"üîÑ –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: {self.progress_info['current_file']}\n"
                    f"üìù –î–µ–π—Å—Ç–≤–∏–µ: {self.progress_info['current_step']}\n\n"
                    f"{message}"
                )
                await self.update_callback(status)
            else:
                await self.update_callback(message)
        
    async def convert_and_upload_pdfs(self, docs_dir="./data/docs", md_dir="./data/md"):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PDF-—Ñ–∞–π–ª—ã –≤ Markdown –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –≤ Yandex Cloud"""
        
        self.is_processing = True
        self.progress_info["start_time"] = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è Markdown-—Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        Path(md_dir).mkdir(parents=True, exist_ok=True)
        
        pdf_files = list(Path(docs_dir).glob("*.pdf"))
        total_files = len(pdf_files)
        self.progress_info["total_files"] = total_files
        await self._send_progress_update(f"–ù–∞–π–¥–µ–Ω–æ {total_files} PDF-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        processed_files = 0
        self.progress_info["processed_files"] = processed_files
        
        for i, pdf_path in enumerate(pdf_files, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞
            if not self.is_processing:
                await self._send_progress_update(f"üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_files}/{total_files} —Ñ–∞–π–ª–æ–≤.")
                return self.files
            
            file_progress = f"[{i}/{total_files}] ({i*100//total_files}%)"
            md_path = Path(md_dir) / f"{pdf_path.stem}.md"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            self.progress_info["current_file"] = pdf_path.name
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ Markdown, –µ—Å–ª–∏ Markdown-—Ñ–∞–π–ª –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not md_path.exists():
                self.progress_info["current_step"] = "–ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"
                await self._send_progress_update(f"{file_progress} –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Ñ–∞–π–ª–∞ {pdf_path.name} –≤ Markdown...")
                start_time = time.time()
                
                try:
                    self.progress_info["current_step"] = "–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                    await self._send_progress_update(f"{file_progress} –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ {pdf_path.name}...")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    try:
                        from concurrent.futures import ProcessPoolExecutor, TimeoutError
                        
                        async def convert_with_timeout():
                            with ProcessPoolExecutor(max_workers=1) as executor:
                                loop = asyncio.get_event_loop()
                                check_time = time.time()
                                
                                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                                while True:
                                    current_time = time.time()
                                    elapsed = current_time - start_time
                                    self.progress_info["elapsed_time"] = elapsed
                                    
                                    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                                    if elapsed > self.max_processing_time:
                                        await self._send_progress_update(
                                            f"{file_progress} ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({self.max_processing_time} —Å–µ–∫) "
                                            f"–¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {pdf_path.name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª."
                                        )
                                        return None
                                    
                                    # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
                                    if current_time - check_time > 30:
                                        await self._send_progress_update(
                                            f"{file_progress} –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {pdf_path.name} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è... "
                                            f"(–ø—Ä–æ—à–ª–æ {elapsed:.1f} —Å–µ–∫)"
                                        )
                                        check_time = current_time
                                    
                                    await asyncio.sleep(1)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                        monitor_task = asyncio.create_task(convert_with_timeout())
                        result = self.converter.convert(str(pdf_path))
                        monitor_task.cancel()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                        
                    except Exception as e:
                        await self._send_progress_update(
                            f"{file_progress} ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {pdf_path.name}: {str(e)[:100]}..."
                        )
                        continue
                    
                    # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    self.progress_info["current_step"] = "–≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown"
                    await self._send_progress_update(f"{file_progress} –≠–∫—Å–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ {pdf_path.name} –≤ Markdown...")
                    content = result.document.export_to_markdown()
                    
                    with open(md_path, "wt", encoding="utf-8") as f:
                        f.write(content)
                    
                    duration = time.time() - start_time
                    await self._send_progress_update(
                        f"{file_progress} –°–æ—Ö—Ä–∞–Ω–µ–Ω Markdown-—Ñ–∞–π–ª: {md_path.name} (–∑–∞–Ω—è–ª–æ {duration:.1f} —Å–µ–∫)"
                    )
                except Exception as e:
                    await self._send_progress_update(f"{file_progress} ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {pdf_path.name}: {e}")
                    continue
            else:
                await self._send_progress_update(f"{file_progress} –§–∞–π–ª {md_path.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")
            
            # –°–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞
            if not self.is_processing:
                await self._send_progress_update(f"üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_files}/{total_files} —Ñ–∞–π–ª–æ–≤.")
                return self.files
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Markdown-—Ñ–∞–π–ª –≤ Yandex Cloud
            try:
                self.progress_info["current_step"] = "–ó–∞–≥—Ä—É–∑–∫–∞ –≤ Yandex Cloud"
                await self._send_progress_update(f"{file_progress} –ó–∞–≥—Ä—É–∂–∞–µ–º {md_path.name} –≤ Yandex Cloud...")
                start_time = time.time()
                file = self.sdk.files.upload(str(md_path))
                self.files.append(file)
                processed_files += 1
                self.progress_info["processed_files"] = processed_files
                duration = time.time() - start_time
                await self._send_progress_update(
                    f"{file_progress} ‚úÖ –§–∞–π–ª {md_path.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (–∑–∞–Ω—è–ª–æ {duration:.1f} —Å–µ–∫), ID: {file.id}"
                )
            except Exception as e:
                await self._send_progress_update(f"{file_progress} ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {md_path.name}: {e}")
        
        # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ is_processing –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –∏–Ω–¥–µ–∫—Å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –≤ –º–µ—Ç–æ–¥ create_search_index –∏–ª–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥
        
        elapsed = time.time() - self.progress_info["start_time"]
        await self._send_progress_update(
            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {int(elapsed//60)}–º {int(elapsed%60)}—Å.\n"
            f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {processed_files}/{total_files} —Ñ–∞–π–ª–æ–≤."
        )
        return self.files
        
    async def create_search_index(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            if not self.files:
                await self._send_progress_update("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞")
                return None
                
            await self._send_progress_update(f"üîç –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è {len(self.files)} —Ñ–∞–π–ª–æ–≤...")
            start_time = time.time()
            
            operation = self.sdk.search_indexes.create_deferred(
                self.files,
                index_type=HybridSearchIndexType(
                    chunking_strategy=StaticIndexChunkingStrategy(
                        max_chunk_size_tokens=1024,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                        chunk_overlap_tokens=512,    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–ª—è –ª—É—á—à–µ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏
                    ),
                    combination_strategy=ReciprocalRankFusionIndexCombinationStrategy(),
                ),
            )
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
            last_update_time = time.time()
            is_done = False
            
            while not is_done:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞
                if not self.is_processing:
                    await self._send_progress_update(f"üõë –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    return None
                    
                current_time = time.time()
                if current_time - last_update_time > 5:  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    elapsed = current_time - start_time
                    await self._send_progress_update(f"‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞... (–ø—Ä–æ—à–ª–æ {elapsed:.1f} —Å–µ–∫)")
                    last_update_time = current_time
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è - —Ä–∞–∑–Ω—ã–µ SDK –º–æ–≥—É—Ç –ø–æ-—Ä–∞–∑–Ω–æ–º—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
                    if hasattr(operation, 'done') and callable(getattr(operation, 'done')):
                        is_done = operation.done()
                    elif hasattr(operation, 'is_done') and callable(getattr(operation, 'is_done')):
                        is_done = operation.is_done()
                    elif hasattr(operation, 'status') and operation.status in ['DONE', 'COMPLETED', 'SUCCESS']:
                        is_done = True
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –∑–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        await asyncio.sleep(5)
                        is_done = True  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                except Exception as e:
                    await self._send_progress_update(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
                    await asyncio.sleep(5)
                
                await asyncio.sleep(1)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.index = operation.wait()  # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
            duration = time.time() - start_time
            await self._send_progress_update(f"‚úÖ –ü–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (–∑–∞–Ω—è–ª–æ {duration:.1f} —Å–µ–∫), ID: {self.index.id}")
            return self.index
        except Exception as e:
            await self._send_progress_update(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞: {e}")
            return None
        finally:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
            self.is_processing = False 